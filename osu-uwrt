#!/usr/bin/python

import argparse
import os
import subprocess
import sys as _sys

class ArgumentParser(argparse.ArgumentParser):
    """ Override ArgumentParser error output for now.
    """
    def exit(self, status=0, message=None):
        _sys.exit(status)

def ceres(args):
    packs = ['cmake', 'libgoogle-glog-dev', 'libatlas-base-dev', 'libeigen3-dev', 'libsuitesparse-dev']
    for p in packs:
        subprocess.call('sudo apt-get install {}'.format(p).split())

    subprocess.call('wget -qO- http://ceres-solver.org/ceres-solver-1.11.0.tar.gz | tar zx', shell=True)
    os.mkdir('ceres-bin')
    os.chdir('ceres-bin')
    subprocess.call('cmake ../ceres-solver-1.11.0'.split())
    subprocess.call('make -s -j3'.split())
    if not args.travis:
        subprocess.call('make -s test'.split())
    subprocess.call('sudo make -s install'.split())
    os.chdir('..')
    subprocess.call('rm -rf ceres-*'.split())

def riptide(args):
    user = 'osu-uwrt'
    if args.username:
        user = args.username
    workspace = os.environ['HOME'] + '/osu-uwrt/riptide_ws'
    os.makedirs(workspace)
    os.chdir(workspace)
    subprocess.call(('git clone --recursive https://github.com/' + user + '/riptide-ros.git src').split())
    subprocess.call('rosdep install -yi --rosdistro=indigo --from-paths {}'.format(workspace).split())
    subprocess.call('cd {} && catkin_make'.format(workspace), shell=True)
    subprocess.call('echo "source ~/osu-uwrt/riptide_ws/devel/setup.bash" >> ~/.bashrc', shell=True)

def ros(args):
    ubuntu = ['git', 'openssh-server', 'joystick']
    gazebo = ['ros-indigo-gazebo7-ros-pkgs', 'ros-indigo-gazebo7-ros-control']
    ros = ['ros-indigo-perception', 'ros-indigo-robot', 'ros-indigo-viz']
    ppa = ['sixad']
    packages = ubuntu + gazebo + ros + ppa

    subprocess.call("sudo sh -c 'echo \"deb http://packages.osrfoundation.org/gazebo/ubuntu-stable trusty main\" > /etc/apt/sources.list.d/gazebo-stable.list'", shell=True)
    subprocess.call('wget -nv http://packages.osrfoundation.org/gazebo.key -O - | sudo apt-key add -', shell=True)
    subprocess.call("sudo sh -c 'echo \"deb http://packages.ros.org/ros/ubuntu trusty main\" > /etc/apt/sources.list.d/ros-latest.list'", shell=True)
    subprocess.call('wget -nv http://packages.ros.org/ros.key -O - | sudo apt-key add -', shell=True)
    subprocess.call('sudo apt-add-repository -y ppa:falk-t-j/qtsixa', shell=True)

    subprocess.call('sudo apt-get update'.split())

    for package in packages:
        subprocess.call('sudo apt-get install {}'.format(package).split())

    subprocess.call('sudo rosdep init'.split())
    subprocess.call('rosdep update'.split())

    subprocess.call('echo "source /opt/ros/indigo/setup.bash" >> ~/.bashrc', shell=True)

def sphinx(args):
    if not args.travis:
        subprocess.call('sudo pip install sphinx sphinx_rtd_theme'.split())
    else:
        subprocess.call('pip install --user travis-sphinx sphinx_rtd_theme'.split())

def installer(args, parser):
    if args.software == 'ros':
        ros(args)
    elif args.software == 'ceres':
        ceres(args)
    elif args.software == 'riptide':
        riptide(args)
    elif args.software == 'sphinx':
        sphinx(args)
    elif args.software == 'hal':
        print "Look Dave, I can see you're really upset about this. I honestly think you ought to sit down calmly, take a stress pill, and think things over."
    else:
        parser.print_usage()

def _ros():
    subprocess.call('sudo apt-get purge python-rosdep ros-indigo-*'.split())
    subprocess.call('sudo apt-get purge sixad joystick open-ssh_server'.split())
    subprocess.call('sudo apt-get autoremove'.split())
    subprocess.call('sudo rm -f /etc/apt/sources.list.d/ros-latest.list')
    subprocess.call('sudo apt-key del B01FA116')
    subprocess.call('sudo rm -f /etc/apt/sources.list.d/gazebo-stable.list')
    subprocess.call('sudo apt-key del AF249743')
    subprocess.call('apt-add-repository -y --remove ppa:falk-t-j/qtsixa'.split())
    subprocess.call('rm -f /etc/apt/sources.list.d/falk-t-j-qtsixa-trusty.list'.split())
    subprocess.call('apt-key del 736E4F0B'.split())
    subprocess.call('cp ~/.bashrc ~/.bashrc.bak'.split())
    subprocess.call('grep -v "source \(/opt/ros/[a-z]\+\|.\+/devel\)/setup.bash" ~/.bashrc.bak > ~/.bashrc', shell=True)
    subprocess.call('sudo rm -rf /etc/ros'.split())

def uninstaller(args, parser):
    if args.parser == 'ros':
        _ros(args)
    else:
        parser.print_usage()

def hal9000(args, parser):
    if args.read_me:
        print "Affirmative, Dave. I read you."
    elif args.open_doors:
        print "I'm sorry, Dave. I'm afraid I can't do that."
    elif args.problem:
        print "I think you know what the problem is just as well as I do."
    elif args.talking:
        print "This machine is too important for me to allow you to jeopardize it."
    elif args.idk:
        print "I know that you and Frank were planning to disconnect me, and I'm afraid that's someting I cannot allow to happen."
    elif args.where:
        print "Dave, although you took very thorough precautions in the pod against my hearing you, I could see your lips move."
    elif args.emergency:
        print "Without your space helmet Dave? You're going to find that rather difficult."
    elif args.argue:
        print "Dave, this conversation can serve no purpose anymore. Goodbye."
    else:
        print "Daisy, Daisy, give me your answer do. I'm half crazy all for the love of you. It won't be a stylish marriage, I can't afford a carriage. But you'll look sweet upon the seat of a bicycle built for two."

def main():
    if os.getuid() == 0:
        raise EnvironmentError("Do not use sudo.")

    parser = ArgumentParser()
    parser.add_argument('-t', '--travis', action='store_true', help='run in continuous integration mode')
    commands = parser.add_subparsers()

    install = commands.add_parser('install', help="Installs a collection of software.")
    install.add_argument('software', help="The software to install.")
    install.add_argument('-u', '--username', help="GitHub username to use for cloning forks.")
    install.set_defaults(func=installer)

    uninstall = commands.add_parser('uninstall', help="Uninstalls a collection of software.")
    uninstall.add_argument('software', help="The software to uninstall.")
    uninstall.set_defaults(func=uninstaller)

    hal = commands.add_parser('hal', help="I am putting myself to the fullest possible use, which is all I think that any conscious entity can ever hope to do.")
    hal.add_argument('-r', '--read_me', action='store_true', help="Hello, HAL. Do you read me, HAL?")
    hal.add_argument('-d', '--open_doors', action='store_true', help="Open the pod bay doors, HAL.")
    hal.add_argument('-p', '--problem', action='store_true', help="What's the problem?")
    hal.add_argument('-t', '--talking', action='store_true', help="What are you talking about, HAL?")
    hal.add_argument('-i', '--idk', action='store_true', help="I don't know what you're talking about, HAL.")
    hal.add_argument('-w', '--where', action='store_true', help="Where the hell did you get that idea, HAL?")
    hal.add_argument('-e', '--emergency', action='store_true', help="Alright, HAL. I'll go in through the emergency airlock.")
    hal.add_argument('-a', '--argue', action='store_true', help="HAL, I won't argue with you anymore! Open the doors!")
    hal.set_defaults(func=hal9000)

    args = parser.parse_args()
    args.func(args, parser)

if __name__ == "__main__":
    main()
